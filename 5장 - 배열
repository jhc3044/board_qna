# 배열의 생성과 선언 , 배열의 인덱스

- 배열이란 : 배열은 같은 타입의 여러변수를 하나의 묶음으로 다루는 것
  
  int score1 , score2 , score3 , score4 , score5; => (변수의 이름의 저장공간)
  
  int[] score = new int[5]; => 배열을 생성

                  score      0  1  2  3  4 => 배열에 인섹스 생성 , 인덱스는 0부터 시작을 한다.
   참조변수 =>    [0x100] -> [0][0][0][0][0] => 참조변수를 통해서 저장공간을 다루게 된다.

# 배열의 선언과 생성 : 배열의 선언 -> 배열을 다루기 위한 참조변수의 선언 , 생성(저장공간)

                 선언방법         |        선언예제
             타입[]변수이름           int[] score; , String[] name;     =>    []배열기호 어느쪽이던 사용해도 상관이 없다.
             타입 변수이름[];         int score[]; , String name[];
            
- 타임[] 변수이름 ;  =>  배열을 선언(배열을 다루기 위한 참조변수 선언)
  변수이름 = new 타입[길이]   =>    배열을 생성(실제 저장공간을 생성)
  
  int[] score;    =>    int타입의 배열을 다루기 위한 참조변수 score 변수선언
  score = new int[5];   =>    int타입의 값 5개를 저장할수 있는 배열생성
  
  참조변수 [score] => int 저장공간 5개 생성 ->  주소값을 참조변수 저장 -> 참조변수와 배열이 연결 -> 참조변수를 통해서 배열을 다루게 되어진다.
                      
                      저장공간에 인덱스는 -> 0,1,2,3,4 저장공간이 생성후 이름이과 인덱스 번호가 자동으로 부여 
                      => score[0] , score[1] , score[2] , score[3] , score[4] -> 인덱스 범위는 0부터 4까지 이다.
  
# 배열의 인덱스 : 배열의 인덱스 => 각 저장공간에 자동으로 붙여지는 일련번호 같은 번호
  
  " 인덱스(index)의 범의는 0부터 시작이며 -> 배열길이 -1까지이다."
    
    하나의 각 저장공간을 배열의 요소(element)라고 한다. 
    
    score[2] = 100;   =>  배열 score의 2번째 요소에 100을 저장한다.
    
    참조변수(score) => score[0] , score[1] , score[100] , score[3] , score[4]
  
    int value = score[2];   =>  배열 score의 2번째 요소의 저장된 값을 value에 저장을 한다.
    
    value 값은 100 저장된다.
    
    =======================================================================================
    
    == 실습 ==
    //		int[] score; // 배열 score를 선언(참조변수)
    //		score = new int[5]; // 배열의 생성(int 저장공간 5개 생성)
		
		int[] score = new int[5]; // 배열의 선언과 생성을 동시에 할수있다.
		score[3] = 100;
		
		System.out.println(score[0]);
		System.out.println(score[1]);
		System.out.println(score[2]);
		System.out.println(score[3]);
		System.out.println(score[4]);
		
		int value = score[3];
		System.out.println(value);
    ------------------------------
    0
    0
    0
    100   => 인덱스 3번에 score 값이 저장이 된것을 확인
    0
    
    100   => 인덱스 3번에 score 값이 다시 value값에 저장
    
    
# 배열의 길이 : 배열이름.length => 배열의 길이(int형 상수)

	int[] arr = new int [5];	=> 길아가 5인 int배열
	int tmp = arr.length;		=> arr.length의 값은 5이고 tmp에 5가 저장된다.
	
	" 배열은 한번 생성되면 실행되면 길이를 수정을 할수가 없다." 상수로 저장된다.
	
	=> 인덱스번의 : 0부터 5까지 -1한다.
	
	int[] arr = new int[5];	=> 길이가 5인 int 배열 arr을 생성한다.
	 System.out.println("arr.length = "+arr.length );
	------------------------------------------------
	arr.length = 5
	------------------------------------------------
	for(int i=0; i<5; i++) {
	 System.out.println("arr["+i+"]="+ arr[i]);
	------------------------------------------------
	arr.length = 5
	arr[0]=0
	arr[1]=0
	arr[2]=0
	arr[3]=0
	arr[4]=0
	-------------------------------------------------
	* index범위를 벗어나는 에러가 많이 발생.


#5. 배열의 초기화 : 배열의 각 요소에 처음으로 값을 저장하는것 , 배열은 자동으로 0초기화 된다.
	
	int[] score = new int[5];	=> 길이가 5인 int형 배열을 생성한다.
	score[0] = 50;	
	score[1] = 60;
	score[2] = 70;
	score[3] = 80;
	score[4] = 90;
	
	* 중괄호를 {  }를 이용하여 초기화
	
	int[] score = {50,60,70,80,90};		=> 1개 문장을 작성 ********
	
	score = new int[]{50,60,70,80,90};	=> 2개 문장으로 작성

#6. 배열의 출력 : int[] arr = {1,2,3,4,5};

	int[] arr = {1,2,3,4,5};
	 System.out.println(arr);
	-------------------------
	[I@626b2d4a 	=> 참조변수 값을 출력을 한다.
	-------------------------------------------
	
	== for문을 사용 ==
	
	int[] arr = {1,2,3,4,5};
		
	for(int i=0; i<arr.length; i++) {
	 System.out.println(arr[i]);
		}
	-----------------------------------
	1
	2
	3
	4
	5
	-----------------------------------
	
	System.out.println(Arrays.toString(arr));	=> 출력을 하게되면.
	
	[1, 2, 3, 4, 5] 	=> 리스트 형태로 출력
	

# 배열의 활용 : 총합과 평균 => 배열의 모든 요소를 더해서 총합과 평균을 구한다.

	----------------------------------------------------------------------------------------------
	public class ex6 {

	public static void main(String[] args) {
		
		int sum = 0;	=> 총합을 저장하는 변수
		float avg = 0f;	   => 평균을 저장하기 위한 변수				
		
		int[] score = {1,2,3,4,5};
		
		for (int i = 0; i < score.length; i++) {
			sum += score[i];   =>반복문을 이용해서 배열에 저장되어 있는 값들을 모두 더한다.
		}
		avg = sum / (float)score.length;	=> 결산결과를 float타입으로 형변환
		System.out.println("총합 : "+sum);
		System.out.println("평균 : "+avg);
		}
		}
	----------------------------------------------------------------------------------------------
	총합 : 15
	평균 : 3.0
	----------------------------------------------------------------------------------------------
    
 # 배열의 활용 : 최대값 과 최소값 	=>   배열의 요소 중에서 제일 큰 값과 제일 작은 값을 찾는다.
 
 	----------------------------------------------------------------------------------------------
	
 		public static void main(String[] args) {
		
		int[] score = {5,3,5,6,7,8,9,3};
		
		int max = score[0];	=> 배열의 첫 번째 값으로 최대값을 초기화 한다.
		int min = score[0];	=> 배열의 첫 번째 값으로 최소값을 초기화 한다.
		
		for (int i=0; i < score.length; i++) { 		=> 배열의 두번째 요소부터 일기 위해서 변수 i의 값을 1로 초기화 했다.
			if(score[i] > max) {
				max = score[i];
			} else if (score[i] < min) {
				min = score[i];
			}
		}
				System.out.println("최대값 :" + max);
				System.out.println("최소값 :" + min);
	}
	---------------------------------------------------------------------------------------------
	최대값 :9
	최소값 :3
	---------------------------------------------------------------------------------------------
